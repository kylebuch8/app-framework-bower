{"version":3,"sources":["app-framework.js"],"names":["afDrawerPanel","$afComponentRegistry","DrawerPanelController","$scope","$element","$attrs","vm","this","open","toggleDrawer","find","toggleClass","destroy","register","afComponentId","$inject","directive","restrict","transclude","template","controller","controllerAs","drawerPanel","handle","toggle","instance","get","service","afNavDrawer","afRipple","$window","link","scope","element","attrs","getColor","parseColor","getElementColor","afRippleColor","getComputedStyle","color","hexToRGBA","hex","substr","dig","length","red","green","blue","opacity","parseInt","rgbToRGBA","replace","multiplier","indexOf","toString","rippleAnimation","event","timing","tl","TimelineMax","w","target","offsetWidth","h","offsetHeight","x","afRippleCenter","offsetX","y","offsetY","Math","abs","deltaX","deltaY","scale_ratio","sqrt","pow","fromTo","ripple","transformOrigin","scale","ease","Linear","easeIn","circle","svgElement","rippleElement","append","prepend","css","position","querySelectorAll","style","fill","querySelector","addEventListener","call","afComponentRegistry","i","instances","$$afHandle","deregister","index","splice","push","angular","noop","getInstances","module","factory"],"mappings":"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","file":"app-framework.min.js","sourcesContent":[";(function() {\n\"use strict\";\n\nangular.module('app-framework', ['app-framework.directives.drawer-panel','app-framework.directives.nav-drawer','app-framework.directives.ripple','app-framework.services.component-registry']);\nangular.module('app-framework.directives.drawer-panel', [\n    'app-framework.services.component-registry'\n])\n    .directive('afDrawerPanel', afDrawerPanel)\n    .factory('$afDrawerPanel', drawerPanel);\n\nafDrawerPanel.$inject = ['$afComponentRegistry'];\n\nfunction afDrawerPanel($afComponentRegistry) {\n    DrawerPanelController.$inject = ['$scope', '$element', '$attrs'];\n\n    function DrawerPanelController($scope, $element, $attrs) {\n        var vm = this;\n\n        $scope.open = false;\n\n        vm.toggleDrawer = function () {\n            $scope.open = !$scope.open;\n            $element.find('af-nav-drawer').toggleClass('open');\n        };\n\n        vm.destroy = $afComponentRegistry.register(vm, $attrs.afComponentId);\n    }\n\n    var directive = {\n        restrict: 'AE',\n        transclude: true,\n        template: '<button class=\"hamburger\" type=\"button\" role=\"button\" aria-label=\"Toggle Navigation\" style=\"position: fixed; z-index: 1006; height: 60px;\" ng-class=\"{ \\'open\\': open }\" ng-click=\"vm.toggleDrawer()\">' +\n                      '<span class=\"lines\"></span>' +\n                  '</button>' +\n                  '<ng-transclude></ng-transclude>' +\n                  '<af-scrim ng-class=\"{ \\'show\\': open }\" ng-click=\"vm.toggleDrawer()\"></af-scrim>',\n        controller: DrawerPanelController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n}\n\ndrawerPanel.$inject = ['$afComponentRegistry'];\n\nfunction drawerPanel($afComponentRegistry) {\n    return function (handle) {\n        var instance = $afComponentRegistry.get(handle);\n        var service = {\n            toggle: toggle\n        };\n\n        return service;\n\n        function toggle() {\n            return instance && instance.toggleDrawer();\n        }\n    };\n}\n\nangular.module('app-framework.directives.nav-drawer', [])\n    .directive('afNavDrawer', afNavDrawer);\n\nfunction afNavDrawer() {\n    var directive = {\n        restrict: 'AE'\n    };\n\n    return directive;\n}\n\n/**\n * Add a ripple to any element.\n * The color of the ripple is determined by the element's\n * color computed style.\n *\n * Usage:\n * <button af-ripple>Button</button>\n * or\n * <af-ripple>Somthing awesome</af-ripple>\n *\n * Attribute Options:\n * af-ripple-center=\"true\" : Centers the ripple in the element\n * af-ripple-color=\"#efefef\" : Sets the color of the ripple\n */\n\nangular.module('app-framework.directives.ripple', [])\n    .directive('afRipple', afRipple);\n\nafRipple.$inject = ['$window'];\n\nfunction afRipple($window) {\n    var directive = {\n        restrict: 'AE',\n        link: link\n    };\n\n    function link(scope, element, attrs) {\n        var circle,\n            ripple,\n            timing = 0.75;\n\n        var svgElement = '<div style=\"height: 0; width: 0; position: absolute; visibility: hidden;\" aria-hidden=\"true\">' +\n                              '<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" focusable=\"false\">' +\n                                  '<symbol id=\"ripply-scott\" viewBox=\"0 0 100 100\">' +\n                                      '<circle id=\"ripple-shape\" cx=\"1\" cy=\"1\" r=\"1\" />' +\n                                  '</symbol>' +\n                              '</svg>' +\n                          '</div>';\n\n        var rippleElement = '<svg class=\"ripple-obj\" id=\"js-ripple\">' +\n                                '<use width=\"100\" height=\"100\" xlink:href=\"#ripply-scott\" class=\"js-ripple\"></use>' +\n                            '</svg>';\n\n        function getColor() {\n            return parseColor(getElementColor());\n        }\n\n        function getElementColor() {\n            return attrs.afRippleColor || $window.getComputedStyle(element[0]).color;\n        }\n\n        function parseColor (color) {\n            var multiplier = 1;\n\n            if (!color) return;\n            if (color.indexOf('rgba') === 0) return color.replace(/\\d?\\.?\\d*\\s*\\)\\s*$/, (0.1 * multiplier).toString() + ')');\n            if (color.indexOf('rgb') === 0) return rgbToRGBA(color);\n            if (color.indexOf('#') === 0) return hexToRGBA(color);\n\n            /**\n            * Converts hex value to RGBA string\n            * @param color {string}\n            * @returns {string}\n            */\n            function hexToRGBA (color) {\n                var hex     = color[ 0 ] === '#' ? color.substr(1) : color,\n                    dig     = hex.length / 3,\n                    red     = hex.substr(0, dig),\n                    green   = hex.substr(dig, dig),\n                    blue    = hex.substr(dig * 2),\n                    opacity = (attrs.afRippleColor) ? 1 : 0.3;\n\n                if (dig === 1) {\n                    red += red;\n                    green += green;\n                    blue += blue;\n                }\n\n                return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',' + opacity + ')';\n            }\n\n            /**\n            * Converts an RGB color to RGBA\n            * @param color {string}\n            * @returns {string}\n            */\n            function rgbToRGBA (color) {\n                var opacity = (attrs.afRippleColor) ? 1 : 0.3;\n                return color.replace(')', ', ' + opacity + ')').replace('(', 'a(');\n            }\n\n        }\n\n        /**\n         * Creates the animation for the ripple\n         * @param event {event}\n         * @param timing {float}\n         * @returns tl {TimelineMax}\n         */\n        function rippleAnimation(event, timing) {\n            var tl           = new TimelineMax(),\n                w            = event.target.offsetWidth,\n                h            = event.target.offsetHeight,\n                x            = (!attrs.afRippleCenter) ? event.offsetX : w / 2,\n                y            = (!attrs.afRippleCenter) ? event.offsetY : h / 2,\n                offsetX      = Math.abs( (w / 2) - x ),\n                offsetY      = Math.abs( (h / 2) - y ),\n                deltaX       = (w / 2) + offsetX,\n                deltaY       = (h / 2) + offsetY,\n                scale_ratio  = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\n            tl.fromTo(ripple, timing, {\n              x: x,\n              y: y,\n              transformOrigin: '50% 50%',\n              scale: 0,\n              opacity: 1,\n              ease: Linear.easeIn\n            },{\n              scale: scale_ratio,\n              opacity: 0\n            });\n\n            return tl;\n        }\n\n        /**\n         * put the element together\n         */\n        element.append(rippleElement).prepend(svgElement).css({\n            position: 'relative'\n        });\n\n        /**\n         * set the fill color of the ripple svg\n         */\n        element[0].querySelectorAll('.ripple-obj')[0].style.fill = getColor();\n\n        circle = element[0].querySelector('#js-ripple');\n        ripple = element[0].querySelectorAll('.js-ripple');\n\n        /*\n         * listen for some clicks\n         */\n        element[0].addEventListener('click', function (event) {\n            rippleAnimation.call(this, event, timing);\n        });\n    }\n\n    return directive;\n}\n\n\nangular.module('app-framework.services.component-registry', [])\n    .factory('$afComponentRegistry', afComponentRegistry);\n\nfunction afComponentRegistry() {\n    var instances = [];\n    var service = {\n        get: get,\n        register: register,\n        getInstances: getInstances\n    };\n\n    return service;\n\n    function get(handle) {\n        var instance,\n            i = 0,\n            length = instances.length;\n\n        for (i; i < length; i += 1) {\n            instance = instances[i];\n\n            if (instance.$$afHandle === handle) {\n                return instance;\n            }\n        }\n\n        return null;\n    }\n\n    function register(instance, handle) {\n        if (!handle) {\n            return angular.noop;\n        }\n\n        instance.$$afHandle = handle;\n        instances.push(instance);\n\n        return deregister;\n\n        function deregister() {\n            var index = instances.indexOf(instance);\n            if (index !== -1) {\n                instances.splice(index, 1);\n            }\n        }\n    }\n\n    function getInstances() {\n        return instances;\n    }\n}\n}());\n"],"sourceRoot":"/source/"}